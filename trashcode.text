{% extends 'base.html.twig' %}

{% block title %}Profil de l'utilisateur{% endblock %}

{% block body %}
    <h1>Info utilisateur</h1>
    <div>
    {% for user in infoUtilisateur %} 
    <div class="bg-white block py-10">
    <div class="max-w-2xl mx-auto">
        <div class="w-full">
            <div class="w-full bg-blue-600 h-48 rounded-t-lg"></div>
            <div class="absolute -mt-20 ml-5">
                <div class="h-40 w-60 rounded-lg">
                    <img src="{{ asset('img/master-gender/' ~  user.gender  ~ '.png') }}" alt="image-guda">
                </div>
            </div>
        </div>
        <div class="bg-primary border border-primary rounded-b-lg p-5 pt-20 flex flex-col">
            <div class="mt-2 mb-1 border border-gray-300 h-6 w-40">
                <p style="font-weight: bold;">Pseudo : {{ user.username }}</p>
            </div>
            <div class="mb-1 bg-gray-200 border border-gray-300 h-5 w-96"></div>
            <div class="text-sm mt-2 text-gray-200">
                <div class="flex flex-row ml-auto space-x-2 items-center">
                    <div class="mb-1 bg-gray-200 border border-gray-300 h-5 w-20"></div>
                    <div class="bg-blue-200 rounded-full h-1 w-1"></div>
                    <div class="mb-1 bg-gray-200 border border-gray-300 h-5 w-20"></div>
                </div>
            </div>

            <div class="pt-8 flex gap-8">
                <div class="flex flex-col">
                    <div class="mb-1 bg-gray-200 border border-gray-300 h-5 w-20"></div>
                    <div class="mb-1 bg-gray-200 border border-gray-300 h-5 w-20"></div>
                </div>
                <div class="flex flex-col">
                    <div class="mb-1 bg-gray-200 border border-gray-300 h-5 w-20"></div>
                    <div class="mb-1 bg-gray-200 border border-gray-300 h-5 w-20"></div>
                </div>
                <div class="flex flex-col">
                    <div class="mb-1 bg-gray-200 border border-gray-300 h-5 w-20"></div>
                    <div class="mb-1 bg-gray-200 border border-gray-300 h-5 w-20"></div>
                </div>
                <div class="flex flex-col">
                    <div class="mb-1 bg-gray-200 border border-gray-300 h-5 w-20"></div>
                    <div class="mb-1 bg-gray-200 border border-gray-300 h-5 w-20"></div>
                </div>
            </div>
            <div class="py-5 break-all bbcode">
                <div class="mb-1 bg-gray-200 border border-gray-300 h-5 w-44"></div>
                <div class="mb-1 bg-gray-200 border border-gray-300 h-5 w-full h-40"></div>
            </div>
        </div>
    </div>
    {% endfor %} 
    </div>
{% endblock %}


//foreach($listeServant as $servant){
    //    foreach($listeUserServant as $userServant){
    //        var_dump($userServant->getServant()->getId() . ' et ' .$servant->getId());
    //        if($servant->getId() == $userServant->getServant()->getId()){
    //            $thisServant = array('Id' => $servant->getId(), 'ServantName' => $servant->getServantName(), 'Classe' => $servant->getClasse(), 'Rarity' => $servant->getRarity(), 'Obtenus' => true);
    //            array_push($servantArray, $thisServant);
    //            break;
    //        }else{
    //            $thisServant = array('Id' => $servant->getId(), 'ServantName' => $servant->getServantName(), 'Classe' => $servant->getClasse(), 'Rarity' => $servant->getRarity(), 'Obtenus' => false);
    //            array_push($servantArray, $thisServant);
    //            break;
    //        }
    //    }
    //}
    //echo '<pre>';
    //var_dump('Id : '. $servant->getId());
    //echo '</pre>';
    //dd($servantArray);

    <div class="{{ Servant.isObtained ? 'card' :'card obtained' }}">
    <img src="{{ asset('img/ServantIcons/Icon_Servant_' ~ Servant.id ~ '.png') }}" alt="Icone_{{ Servant.ServantName }}">
    <div class="card-container">
        <h2><b>{{ Servant.ServantName }}</b></h2>
        <h3>{{ Servant.Classe }}</h3>
    </div>
    <div class="card-footer">
        <button servant-id="{{ Servant.id }}" class="{{ Servant.isObtained ? 'btn-burn' :'btn-ajout' }}">{{ Servant.isObtained ? 'Burn' :'Summon' }}</button>
    </div>
</div>


Ajout automatique craft essence base de données
/**
     * @Route("/craft_essence_insert", name="craft_essence_insert")
     */
    public function insertCraftEssenceDatabase()
    {
        $listeCraftEssence = array();  
        $em = $this->getDoctrine()->getManager();
        
        $result = $this->getAtlasAcademyAPI();
        foreach($result as $currentCraftEssence)    //On parcours la réponse de l'api.
        {
            $craftEssence = [
                'Id' => $currentCraftEssence['collectionNo'], //On sauvegarde le "collectionNo" de la craft essence en cours pour l'utiliuser en temps qu'ID.
                'Name' => $currentCraftEssence['name'], //On sauvegarde le nom de la craft essence en cours.
                'Rarity' => $currentCraftEssence['rarity'],
                'Type' => $currentCraftEssence['flag'],
                'Url' => $currentCraftEssence['extraAssets']['charaGraph']['equip'][$currentCraftEssence['id']] //On sauvegarde le l'url de l'image de la craft essence.
            ];
            array_push($listeCraftEssence, $craftEssence);  //On push dans le tableau "listeCraftEssence" la craft essence en cours.
        }
        usort($listeCraftEssence, function($firstId, $secondId){    //On trie le tableau "listeCraftEssence" afin de mettre dans l'ordre de l'ID (collectionNo) de la craft essence -
            return $firstId['Id'] <=> $secondId['Id'];              //au lieu de l'ordre dans lequel la craft essence est push dans le tableau car le premier ID retourné par l'api -
        });                                                         //est 191, donc on met l'id 1 en premier.

        foreach($listeCraftEssence as $currentCraftEssence){
            $CE = new CraftEssence();
            $CE->setCEName($currentCraftEssence['Name']);
            $CE->setCERarity($currentCraftEssence['Rarity']);
            $CE->setCEType($currentCraftEssence['Type']);
            $em->persist($CE);
            $em->flush();
        }

        return new Response('fini');
    }


    $servantArray = array();

        $em = $this->getDoctrine()->getManager();
        //On récupère tout les servants de la table Servant
        $servantRepository = $em->getRepository(Servant::class);
        $listeServant = $servantRepository->findAll();
        //On récupère tout les servants correspondants a l'utilisateur dans la table ServantInfo
        $servantinfoRepository = $em->getRepository(ServantInfo::class);
        $listeUserServant = $servantinfoRepository->findBy(['user' => $this->getUser()]);
        foreach($listeServant as $servant){
            foreach($listeUserServant as $userServant){
                if($servant->getId() == $userServant->getServant()->getId()){
                    $thisServant = array('Id' => $servant->getId(), 'ServantName' => $servant->getServantName(), 'Classe' => $servant->getClasse(), 'Rarity' => $servant->getRarity(), 'Obtenus' => true);
                    array_push($servantArray, $thisServant);
                    break;
                }
            }
            if(!array_key_exists($servant->getId(), $servantArray)){
                $thisServant = array('Id' => $servant->getId(), 'ServantName' => $servant->getServantName(), 'Classe' => $servant->getClasse(), 'Rarity' => $servant->getRarity(), 'Obtenus' => false);
                array_push($servantArray, $thisServant);
            }
        }
        
        return $this->render('fate/listeServant.html.twig', [
            'servantArray' => $servantArray,
        ]);



        $em = $this->getDoctrine()->getManager();
        
        $craftEssenceRepository = $em->getRepository(CraftEssence::class);    //On récupère le repository de la classe CraftEssence
        $listeCraftEssenceBDD = $craftEssenceRepository->findAll();  //On récupère toutes les crafts essences existantes dans la base de données
        
        $craftEssencetinfoRepository = $em->getRepository(CraftEssenceInfo::class);   //On récupère le repository de la classe CraftEssenceInfo
        $listeUserCraftEssence = $craftEssencetinfoRepository->findBy(['user' => $this->getUser()]); //On récupère toutes les crafts essences existantes dans la base de données ayant l'utilisateur courant
        
        $listeCraftEssence = array();   //Tableau qui vas servir a récupèrer toutes les craft essences et leurs informations.
        $result = $this->getAtlasAcademyAPI();  //On récupère la réponse de l'api d'AtlasAcademy qui vas contenir toutes les craft essences et leurs informations associès.
        foreach($result as $currentCraftEssence){    //On parcours la réponse de l'api.
            foreach($listeUserCraftEssence as $userCraftEssence){
                if($currentCraftEssence['collectionNo'] == $userCraftEssence->getCraftEssence()->getId()){
                    $craftEssence = [
                        'Id' => $currentCraftEssence['collectionNo'], //On sauvegarde le "collectionNo" de la craft essence en cours pour l'utiliuser en temps qu'ID.
                        'Name' => $currentCraftEssence['name'], //On sauvegarde le nom de la craft essence en cours.
                        'Url' => $currentCraftEssence['extraAssets']['charaGraph']['equip'][$currentCraftEssence['id']], //On sauvegarde le l'url de l'image de la craft essence.
                        'Obtenus' => true,
                    ];
                    array_push($listeCraftEssence, $craftEssence);  //On push dans le tableau "listeCraftEssence" la craft essence en cours.
                }
            }
            if(!array_key_exists($currentCraftEssence['collectionNo'], $listeCraftEssence)){
                $craftEssence = [
                    'Id' => $currentCraftEssence['collectionNo'], //On sauvegarde le "collectionNo" de la craft essence en cours pour l'utiliuser en temps qu'ID.
                    'Name' => $currentCraftEssence['name'], //On sauvegarde le nom de la craft essence en cours.
                    'Url' => $currentCraftEssence['extraAssets']['charaGraph']['equip'][$currentCraftEssence['id']], //On sauvegarde le l'url de l'image de la craft essence.
                    'Obtenus' => false,
                ];
                array_push($listeCraftEssence, $craftEssence);
            }
        }
        usort($listeCraftEssence, function($firstId, $secondId){    //On trie le tableau "listeCraftEssence" afin de mettre dans l'ordre de l'ID (collectionNo) de la craft essence -
            return $firstId['Id'] <=> $secondId['Id'];              //au lieu de l'ordre dans lequel la craft essence est push dans le tableau car le premier ID retourné par l'api -
        });                                                         //est 191, donc on met l'id 1 en premier.

        return $this->render('craft_essence/listeCraftEssence.html.twig', ['listeCraftEssence' => $listeCraftEssence]);